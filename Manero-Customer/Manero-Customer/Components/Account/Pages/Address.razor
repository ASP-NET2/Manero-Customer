@page "/Account/ListAddresses"
@rendermode InteractiveServer
@attribute [Authorize]



@if (addresses == null || addresses.Count == 0)
{
    <div class="add-new-address">
        <p>No addresses found for this user.</p>
        <button @onclick="NavigateToAddressDetails" class="add-address">Add a new address</button>
    </div>

}

else
{
    <section class="all-addresses">
        <div class="container">
        <div class="my-addresses">
            <h1>My address</h1>
            <div class="address-list">
                <div class="address-list">
                    @foreach (var address in addresses)
                    {
                        <div class="address-item">
                            <div class="address-detail">
                                <p class="address-title">@address.AddressTitle</p>
                                <div class="addreses">
                                    <p>@address.AddressLine_1</p>
                                    <p>Postal Code: @address.PostalCode</p>
                                    <p>City: @address.City</p>
                                </div>
                            </div>
                            <div class="edit-btn">
                                    <button @onclick="() => NavigateToAddressUpdate(address.AddressId)" class="edit-button" type="submit">✎</button>
                                </div>
                            </div>    
                    }
                </div>
                <div class="btn-placement">
                    <button @onclick="NavigateToAddressDetails" class="add-address">+</button>
                    <p class="add-new">Add a  new address</p>
                </div>
            </div>
        </div>
        </div>
    </section>
}


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public int AccountId { get; set; }

    private List<AddressModel> addresses;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (AccountId != 0)
            {
                addresses= await AddressService.GetAddressesByUserAsync(AccountId);
                Logger.LogInformation($"Addresses loaded for userId: {AccountId}");
            }
            else
            {
                Logger.LogError("AccountId is 0 or not supplied.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"An error occurred: {ex.Message}");
        }
    }

    public void NavigateToAddressDetails()
    {
        Logger.LogInformation($"Navigating to AddressDetails with userId: {AccountId}");
        if (AccountId == 0)
        {
            Logger.LogError("AccountId is null or empty, cannot navigate");
        }
        else
        {
            NavigationManager.NavigateTo($"/Account/AddressDetails?userId={AccountId}");
        }
    }


    public void NavigateToAddressUpdate(int addressId)
    {
        Logger.LogInformation($"Navigating to AddressDetails with userId: {addressId}");
        NavigationManager.NavigateTo($"/Account/AddressUpdate?addressId={addressId}");

    }
}
