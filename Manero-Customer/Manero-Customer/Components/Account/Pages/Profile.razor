@page "/Account/Profile"
@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Profile</PageTitle>

<section class="account-profile">
    <div class="container">
        <div class="profile">
           
          <div class="profile-picture">
                <_ProfileImage OnUploadSuccess="HandleUploadSuccess" />
                @if (!string.IsNullOrEmpty(uploadedImageUrl))
                {
                    <img src="@uploadedImageUrl" alt="Profile Image" style="max-width: 200px; max-height: 200px;" />
                }

                @if (!string.IsNullOrEmpty(User.ImageUrl))
                {
                    <img src="@User.ImageUrl" alt="Profile Image" style="max-width: 200px; max-height: 200px;" />
                }
            </div>
            <div class="profile-details">
                <div class="first-lastname">
                    <h4 class="firstname">@User.FirstName</h4>
                    <h4 class="lastname">@User.LastName</h4>
                    <h4>@User.AccountId</h4>
                </div>  
            </div>
            <div class="profile-actions">
                <ul>
                    <li>
                    <a @onclick="NavigateToEditProfile">
                        <i class="fa-regular fa-pen"></i> EditProfile
                    </a>
                    </li>
                    <li>
                    <a @onclick="NavigateToAddress">
                        <i class="fa-regular fa-location-dot"></i>My address
                    </a>
                    </li>
                    <li class="nav-item">
                        <i class="fa-solid fa-arrow-right-from-bracket"></i>
                        <NavLink class="nav-link" href="/Logout">Sign out</NavLink>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</section>

@code {
    public SaveImageRequest Image { get; set; } = new();
    private string? message;
    public ProfileModel User { get; set; } = new ();
    private string? uploadedImageUrl;

    public string Email { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        var userProfile = await UserService.GetAuthenticatedUserProfileAsync();
        if (userProfile != null)
        {
            Logger.LogInformation($"User profile loaded: {userProfile.AccountId}, {userProfile.FirstName}, {userProfile.LastName},{userProfile.ImageUrl}");
            UserProfileFactory.UpdateUserProfile(userProfile, User);
        }
        else
        {
            Logger.LogError("Error retrieving user profile.");
            message = "Error retrieving user profile.";
        }
    }

    private string? uploadStatus { get; set; }

    private async Task HandleUploadSuccess(string imageUrl)
    {
        try
        {
            var accountId = User.AccountId;
            var response = await HttpClient.PostAsJsonAsync("https://manerouserprovider.azurewebsites.net/api/save-image-url?code=03fGT1n7ja2sdW-HIJjiPO6bmNpGn3gZcsLh-vnvviFPAzFuwEJzag%3D%3D", new SaveImageRequest
                {
                    AccountId = accountId,
                    ImageUrl = imageUrl
                });

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("Image URL saved to database.");
                var userProfile = await UserService.GetAuthenticatedUserProfileAsync();
                if (userProfile != null)
                {
                    Logger.LogInformation($"User profile loaded: {userProfile.AccountId}, {userProfile.FirstName}, {userProfile.LastName},{userProfile.ImageUrl}");
                    UserProfileFactory.UpdateUserProfile(userProfile, User);
                }
            }
            else
            {
                Logger.LogError("Error saving image URL to database.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"Exception: {ex.Message}");
        }
    }
 
      public void NavigateToEditProfile()
    {
        Logger.LogInformation($"Navigating to EditProfile with IdentityUserId: {User.IdentityUserId}");
        if (string.IsNullOrEmpty(User.IdentityUserId))
        {
            Logger.LogError("IdentityUserId is null or empty, cannot navigate");
        }
        else
        {
            NavigationManager.NavigateTo($"/Account/EditProfile?userId={User.IdentityUserId}");
        }
    }

    public void NavigateToAddress()
    {
        Logger.LogInformation($"Navigating to EditProfile with IdentityUserId: {User.AccountId}");
        if (User.AccountId == 0)
        {
            Logger.LogError("AccountId is null or empty, cannot navigate");
        }
        else
        {
            NavigationManager.NavigateTo($"/Account/ListAddresses?userId={User.AccountId}");
        }
    }

    

}
