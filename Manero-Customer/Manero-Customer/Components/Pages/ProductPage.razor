@page "/product/{title}"
@using Manero_Customer.Services
@using Manero_Customer.Data.Models
@using System.Diagnostics
@inject NavigationManager Navigation
@inject ProductDetailsService productDetailsService
@inject ILogger<ProductPage> Logger
@inject CartService cartService
@inject CookieService cookieService
@rendermode InteractiveServer


<div class="container">
    <section class="ProductPage">
        <div class="product-container">
            @if (product != null)
            {
                <div class="image-container">
                    <img class="product-image" src="@product.ImageUrl" alt="produktbild" />
                    @if (product.OnSale)
                    {
                        <div class="sale-badge">SALE</div>
                    }
                </div>
                <div class="product-content">
                    <h3>@product.Title</h3>
                    <p>Författare: @product.Author</p>
                    <p>Format: @product.FormatName</p>
                    <div class="priceContainer">
                        @if (product.DiscountPrice == null || product.DiscountPrice == 0)
                        {
                            <p class="price">@product.Price :-</p>
                        }
                        else
                        {
                            <p class="regPrice">@product.Price :-</p>
                            <p class="discPrice">@product.DiscountPrice :-</p>
                        }
                    </div>
                    <h5>Beskrivning</h5>
                    <p>@product.ShortDescription</p>
                    <p>@product.LongDescription</p>
                </div>
            }
            else
            {
                <p>Produkten kunde inte hittas.</p>
            }
        </div>
        @if (product != null)
        {
            <button class="btn-theme" @onclick="() => AddToCartAsync(product)">+ LÄGG TILL I KUNDVAGNEN</button>
        }
    </section>
</div>

@code {
    [Parameter]
    public string? Title { get; set; }

    private ProductDetailsModel? product;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Title))
        {
            try
            {
                Logger.LogInformation("Loading product details for title: {Title}", Title);
                var products = await productDetailsService.MatchProductsByTitleAsync(Title);
                product = products.FirstOrDefault();
                Logger.LogInformation("Product loaded: {Product}", product?.Title);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error loading product details for title: {Title}", Title);
                product = null;
            }
        }
    }

    private async Task AddToCartAsync(ProductDetailsModel model)
    {
        Debug.WriteLine("Navigera");
        // var userId = cookieService.GetSessionIdCookie();
        var userId = "1e687f27-4b3b-4c70-9a35-d6b0f4b8a41f";
        var prod = new Product
            {
                ProductId = model.Id,
                ProductName = model.Title,
                Quantity = model.Quantity,
                Price = model.OnSale && model.DiscountPrice.HasValue && model.DiscountPrice.Value > 0 ? model.DiscountPrice.Value : model.Price
            };
        await cartService.AddToCart(prod, userId);
        
    }
}
