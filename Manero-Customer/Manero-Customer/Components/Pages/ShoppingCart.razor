@page "/shoppingCart"
@using Manero_Customer.Data.Models
@using Manero_Customer.Factories
@using Manero_Customer.Services
@using System.Diagnostics
@inject CartService cartService
@inject CookieService cookieService
@inject ProductService productService
@inject AddToCartFactory addToCartFactory
@rendermode InteractiveServer

@if (isLoading)
{
    <p>Loading...</p>
}
else if (cart == null )
{
    <EmptyCart/>    
}
else
{
    <div class="container">

    @foreach ( var item in models)
    {        
        <_CartProductItem
            Title="@item.Title"
            Price="@item.Price"
            DiscountPrice="@item.DiscountPrice"
            Quantity="@item.Quantity"
            ImgUrl="@item.ImgUrl"
            Format="@item.Format"
            Id="@item.Id"
            userId ="@item.UserId"
            />
    }
    <p>Total Price: </p>
    </div>
}

@code {
    public Cart? cart;
    private bool isLoading = true;
    public List<CartItemModel> models = new ();

    protected override async Task OnInitializedAsync()
    {
        cartService.OnChange += StateChanged;
        await GetList();
    }

    private async Task GetList()
    {
        try
        {
            if (cartService == null || cookieService == null)
            {
                throw new InvalidOperationException("Services are not available.");
            }
            models.Clear();
            var userId = cookieService.GetSessionIdCookie();
            cart = await cartService.GetCartList(userId);
            if (cart != null)
            {
                foreach (var prod in cart.Products)
                {
                    models.Add(await addToCartFactory.SingleProduct(prod, userId));
                }
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error fetching cart: {ex.Message}");
            // Handle error (e.g., show error message to the user)
        }
        finally
        {
            isLoading = false;
        }
    }

    private async void StateChanged()
    {
        await GetList();
        StateHasChanged();
    }

    public void Dispose()
    {
        cartService.OnChange -= StateChanged;
    }
}

       